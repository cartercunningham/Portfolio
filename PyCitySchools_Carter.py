
# coding: utf-8

# # PyCity Schools Analysis
# 
# Carter's Observations
# * When comparing top and bottom performing schools, funding per student does not appear to be a key determinant of success. The bottom 5 schools are all very large, though (>2,500 students), while the top 5 schools tend to be smaller, suggesting school size might have an impact.
# 
# * Regardless of size, funding, or effectiveness of the school, reading scores and pass rates were higher than math scores and pass rates
# 
# * Charter schools tended to outperformd district schools on both reading and math tests.
# 
# * All of the above deserve deeper analysis into their causality, if any exists, as well as consideration of additional factors not reviewed in this analysis
# ---

# ### Note
# * Instructions have been included for each segment. You do not have to follow them exactly, but they are included to help you think through the steps.

# In[4]:


get_ipython().run_cell_magic('writefile', 'PyCitySchools.py', '# Dependencies and Setup\nimport pandas as pd\nimport numpy as np\n\n# File to Load (Remember to Change These)\nschool_data_to_load = "Resources/schools_complete.csv"\nstudent_data_to_load = "Resources/students_complete.csv"\n\n# Read School and Student Data File and store into Pandas Data Frames\nschool_data = pd.read_csv(school_data_to_load)\nstudent_data = pd.read_csv(student_data_to_load)\n\n# Combine the data into a single dataset\ndata_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])\n\n#COMPLETE\n\n#Count the number of unique school names\nunique_schools=data_complete.groupby("school_name")\nTotal_Schools=len(unique_schools)\n\n#Count the number of rows; assumes each row represents a unique student\nTotal_Students=data_complete["school_name"].count()\n\n#Sum budget column for each unique school - currently repeats for each student in a school (create a new data frame with just 1 row per school)\nunique_budget=data_complete["budget"].unique()\nTotal_Budget=unique_budget.sum()\n\n#average math_score\nAvg_Math=data_complete["math_score"].mean()\n\n#average reading\nAvg_Reading=data_complete["reading_score"].mean()\n\n#Count number >=70 on math, divide by Total_Students\ni=0\nfor score in data_complete["math_score"]:\n    if score>=70:\n        i=i+1\nMath_Pass=((i/Total_Students)*100)\n\n#Count number >=70 on reading, divide by Total_Students\nj=0\nfor score in data_complete["reading_score"]:\n    if score>=70:\n        j=j+1\nReading_Pass=((j/Total_Students)*100)\n\nOverall_Pass=(Math_Pass+Reading_Pass)/2\n\n\nd={"Total Schools":[Total_Schools],\n    "Total Students":[Total_Students],\n   "Total Budget":[Total_Budget],\n   "Average Math":[Avg_Math],\n   "Average Reading":[Avg_Reading],\n   "Math Passing Rate":[Math_Pass],\n   "Reading Passing Rate":[Reading_Pass],\n   "Overall Passing Rate":[Overall_Pass]}\n\ndist_summ=pd.DataFrame(data=d)\n\ndist_summ["Total Students"] = dist_summ["Total Students"].map("{:,}".format)\ndist_summ["Total Budget"] =dist_summ["Total Budget"].map("${:,.2f}".format)\n\n#Show District Summary\nprint(dist_summ.head())\n\n#Create a new df with only relevant columns, using data_complete as starting point - COMPLETE\nschool_df=data_complete[["school_name","type", "size","budget", "math_score", "reading_score"]]\n\n#Add new columns to the new df: funding per student - COMPLETE\nper_student=school_df["budget"]/school_df["size"]\nschool_df["Per Student Budget"]=per_student\n\n\n\n#Add new columns to the new df: pass rate by school for math\nmath_pass_by_school=school_df.groupby("school_name")["math_score"].apply(lambda c: ((c>=70).sum()/len(c)*100))\nmath_pass_by_school=pd.DataFrame(data=math_pass_by_school)\nschool_df = pd.merge(school_df, math_pass_by_school, how="left", on=["school_name", "school_name"])\n\n#Add new columns to the new df: pass rate by school for reading\nreading_pass_by_school=school_df.groupby("school_name")["reading_score"].apply(lambda c: ((c>=70).sum()/len(c)*100))\nreading_pass_by_school=pd.DataFrame(data=reading_pass_by_school)\nschool_df = pd.merge(school_df, reading_pass_by_school, how="left", on=["school_name", "school_name"])\n\n\n#Add new columns to the new df: overall pass rate\noverall_pass_by_school=(school_df["math_score_y"]+school_df["reading_score_y"])/2\noverall_pass_by_school=pd.Series(overall_pass_by_school)\n\nschool_df["Overall Pass Rate"] = overall_pass_by_school.values\n\n#Adjust the math score to be average for each school - COMPLETE\nmath_avg_by_school = school_df.groupby(\'school_name\')[\'math_score_x\'].mean()\nmath_avg_by_school=pd.DataFrame(data=math_avg_by_school)\nschool_df = pd.merge(school_df, math_avg_by_school, how="left", on=["school_name", "school_name"])\n\n#Adjust the reading score to be average for each school - COMPLETE\nread_avg_by_school = school_df.groupby(\'school_name\')[\'reading_score_x\'].mean()\nread_avg_by_school=pd.DataFrame(data=read_avg_by_school)\nschool_df = pd.merge(school_df, read_avg_by_school, how="left", on=["school_name", "school_name"])\nschool_df.head()\n\nschool_df = school_df.rename(columns={"school_name":"School Name",\n                                      "type":"School Type",\n                                      "budget":"Budget",\n                                      "size":"Total Students",\n                                      "math_score_y":"% Passing Math",\n                                      "reading_score_y":"% Passing Reading",\n                                      "math_score_y":"% Passing Math",\n                                      "math_score_x_y":"Average Math Score",\n                                      "reading_score_x_y":"Average Reading Score"})\n\n#Remove raw score columns - COMPLETE\ndel school_df["math_score_x_x"]\ndel school_df["reading_score_x_x"]\n\n#Save complete, non-formatted dataframe for later\ncomp_school_df=school_df\n\n#Reformat students and budget columns\nschool_df["Total Students"] = school_df["Total Students"].map("{:,}".format)\nschool_df["Budget"] =school_df["Budget"].map("${:,.2f}".format)\nschool_df["Per Student Budget"] =school_df["Per Student Budget"].map("${:,.2f}".format)\n\n#Remove duplicate rows\nschool_unique_df=school_df.drop_duplicates()\nschool_unique_df=school_unique_df.set_index("School Name")\nprint(school_unique_df)\n\n## School Summary\n\n\n## Top Performing Schools (By Passing Rate)\n\n#Top 5 schools\ntop_schools_df = school_unique_df.sort_values("Overall Pass Rate", ascending=False)\nprint(top_schools_df.head(5))\n\n## Bottom Performing Schools (By Passing Rate)\n\n#Bottom 5 schools\nbottom_schools_df = school_unique_df.sort_values("Overall Pass Rate")\nprint(bottom_schools_df.head(5))\n\n\n\n## Math Scores by Grade\n\ngrade_9=data_complete.loc[data_complete["grade"]=="9th"]\ngrade_9_math=grade_9[["school_name","math_score"]]\ngrade_9_math=grade_9_math.groupby("school_name").mean()\ngrade_9_math.reset_index(level=0, inplace=True)\ngrade_9_math = grade_9_math.rename(columns={"school_name":"School Name",\n                                      "math_score":"9th Grade Avg Math Score"})\n\ngrade_10=data_complete.loc[data_complete["grade"]=="10th"]\ngrade_10_math=grade_10[["school_name","math_score"]]\ngrade_10_math=grade_10_math.groupby("school_name").mean()\ngrade_10_math.reset_index(level=0, inplace=True)\ngrade_10_math = grade_10_math.rename(columns={"school_name":"School Name",\n                                              "math_score":"10th Grade Avg Math Score"})\n\ngrade_11=data_complete.loc[data_complete["grade"]=="11th"]\ngrade_11_math=grade_11[["school_name","math_score"]]\ngrade_11_math=grade_11_math.groupby("school_name").mean()\ngrade_11_math.reset_index(level=0, inplace=True)\ngrade_11_math = grade_11_math.rename(columns={"school_name":"School Name",\n                                      "math_score":"11th Grade Avg Math Score"})\n\ngrade_12=data_complete.loc[data_complete["grade"]=="12th"]\ngrade_12_math=grade_12[["school_name","math_score"]]\ngrade_12_math=grade_12_math.groupby("school_name")\ngrade_12_math=grade_12_math.mean()\ngrade_12_math.reset_index(level=0, inplace=True)\ngrade_12_math = grade_12_math.rename(columns={"school_name":"School Name",\n                                      "math_score":"12th Grade Avg Math Score"})\n\ngrade_12_math\n\nmath_summ = pd.merge(grade_11_math,grade_12_math, how="left", on=["School Name","School Name"])\nmath_summ = pd.merge(grade_10_math,math_summ, how="left", on=["School Name","School Name"])\nmath_summ = pd.merge(grade_9_math,math_summ, how="left", on=["School Name","School Name"])\nprint(math_summ)\n\n## Reading Score by Grade \n\ngrade_9=data_complete.loc[data_complete["grade"]=="9th"]\ngrade_9_reading=grade_9[["school_name","reading_score"]]\ngrade_9_reading=grade_9_reading.groupby("school_name").mean()\ngrade_9_reading.reset_index(level=0, inplace=True)\ngrade_9_reading = grade_9_reading.rename(columns={"school_name":"School Name",\n                                      "reading_score":"9th Grade Avg Reading Score"})\n\ngrade_10=data_complete.loc[data_complete["grade"]=="10th"]\ngrade_10_reading=grade_10[["school_name","reading_score"]]\ngrade_10_reading=grade_10_reading.groupby("school_name").mean()\ngrade_10_reading.reset_index(level=0, inplace=True)\ngrade_10_reading = grade_10_reading.rename(columns={"school_name":"School Name",\n                                              "reading_score":"10th Grade Avg Reading Score"})\n\ngrade_11=data_complete.loc[data_complete["grade"]=="11th"]\ngrade_11_reading=grade_11[["school_name","reading_score"]]\ngrade_11_reading=grade_11_reading.groupby("school_name").mean()\ngrade_11_reading.reset_index(level=0, inplace=True)\ngrade_11_reading = grade_11_reading.rename(columns={"school_name":"School Name",\n                                      "reading_score":"11th Grade Avg Reading Score"})\n\ngrade_12=data_complete.loc[data_complete["grade"]=="12th"]\ngrade_12_reading=grade_12[["school_name","reading_score"]]\ngrade_12_reading=grade_12_reading.groupby("school_name")\ngrade_12_reading=grade_12_reading.mean()\ngrade_12_reading.reset_index(level=0, inplace=True)\ngrade_12_reading = grade_12_reading.rename(columns={"school_name":"School Name",\n                                      "reading_score":"12th Grade Avg Reading Score"})\n\ngrade_12_reading\n\nreading_summ = pd.merge(grade_11_reading,grade_12_reading, how="left", on=["School Name","School Name"])\nreading_summ = pd.merge(grade_10_reading,reading_summ, how="left", on=["School Name","School Name"])\nreading_summ = pd.merge(grade_9_reading,reading_summ, how="left", on=["School Name","School Name"])\nprint(reading_summ)\n\n## Scores by School Spending\n\n\n# Sample bins. Feel free to create your own bins.\nspending_bins = [0, 585, 615, 645, 675]\nspend_groups = ["<$585", "$585-615", "$615-645", "$645-675"]\n\n\n# Slice the data and place it into bins\nreading_pass_by_school=data_complete.groupby("school_name")["reading_score"].apply(lambda c: ((c>=70).sum()/len(c)*100))\nreading_pass_by_school_df=pd.DataFrame(data=reading_pass_by_school)\ndata_complete = pd.merge(data_complete,reading_pass_by_school_df, how="left", on=["school_name","school_name"])\nmath_pass_by_school=data_complete.groupby("school_name")["math_score"].apply(lambda c: ((c>=70).sum()/len(c)*100))\nmath_pass_by_school_df=pd.DataFrame(data=math_pass_by_school)\ndata_complete = pd.merge(data_complete,math_pass_by_school_df, how="left", on=["school_name","school_name"])\nper_student=data_complete["budget"]/data_complete["size"]\ndata_complete["Per Student Budget"]=per_student\ndata_complete["School Spend Range"] = pd.cut(data_complete["Per Student Budget"], spending_bins, labels=spend_groups)\noverall_pass=data_complete["reading_score_y"]*.5+data_complete["math_score_y"]*.5\ndata_complete["Overall Pass"]=overall_pass\nschool_by_budget = data_complete.groupby("School Spend Range").mean()\nschool_by_budget = school_by_budget.rename(columns={"math_score_y":"% Passing Math",\n                                      "reading_score_y":"% Passing Reading",\n                                      "math_score_x":"Average Math Score",\n                                      "reading_score_x":"Average Reading Score"})\n\n\ndel school_by_budget["size"]\ndel school_by_budget["School ID"]\ndel school_by_budget["budget"]\ndel school_by_budget["Student ID"]\ndel school_by_budget["Per Student Budget"]\n\n\nprint(school_by_budget)\n\n## Scores by School Size\n\n\n# Sample bins. Feel free to create your own bins.\nsize_bins = [0, 1000, 2000, 5000]\ngroup_names = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]\n\ndata_complete["Size Range"] = pd.cut(data_complete["size"], size_bins, labels=group_names)\nschool_by_size = data_complete.groupby("Size Range").mean()\nschool_by_size = school_by_size.rename(columns={"math_score_y":"% Passing Math",\n                                      "reading_score_y":"% Passing Reading",\n                                      "math_score_x":"Average Math Score",\n                                      "reading_score_x":"Average Reading Score"})\n\ndel school_by_size["size"]\ndel school_by_size["School ID"]\ndel school_by_size["budget"]\ndel school_by_size["Student ID"]\ndel school_by_size["Per Student Budget"]\n\nprint(school_by_size)\n\n## Scores by School Type\n\n\nschool_by_type = comp_school_df.groupby(\'School Type\').mean()\nschool_by_type\n')

